{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst messageSlice = createSlice({\n  name: \"messages\",\n  initialState: {\n    loading: false,\n    messages: [],\n    error: null,\n    message: null\n  },\n  reducers: {\n    getAllMessagesRequest(state, action) {\n      state.messages = [];\n      state.error = null;\n      state.loading = true;\n    },\n    getAllMessagesSuccess(state, action) {\n      state.messages = action.payload;\n      state.error = null;\n      state.loading = false;\n    },\n    getAllMessagesFailed(state, action) {\n      state.messages = state.messages;\n      state.error = action.payload;\n      state.loading = false;\n    },\n    deleteMessageRequest(state, action) {\n      state.loading = true;\n      state.error = null;\n      state.message = null;\n    },\n    deleteMessageSuccess(state, action) {\n      state.error = null;\n      state.loading = false;\n      state.message = action.payload;\n    },\n    deleteMessageFailed(state, action) {\n      state.error = action.payload;\n      state.loading = false;\n      state.message = null;\n    },\n    resetMessageSlice(state, action) {\n      state.error = null;\n      state.messages = state.messages;\n      state.message = null;\n      state.loading = false;\n    },\n    clearAllErrors(state, action) {\n      state.error = null;\n      state.messages = state.messages;\n    }\n  }\n});\nexport const getAllMessages = () => async dispatch => {\n  dispatch(messageSlice.actions.getAllMessagesRequest());\n  try {\n    const response = await axios.get(\"http://localhost:8000/api/message/admin/messages\", {\n      withCredentials: true\n    });\n    dispatch(messageSlice.actions.getAllMessagesSuccess(response.data.messages));\n    dispatch(messageSlice.actions.clearAllErrors());\n  } catch (error) {\n    dispatch(messageSlice.actions.getAllMessagesFailed(error.response.data.message));\n  }\n};\nexport const deleteMessage = id => async dispatch => {\n  dispatch(messageSlice.actions.deleteMessageRequest());\n  try {\n    const response = await axios.delete(`http://localhost:8000/api/message/admin/delete/${id}`, {\n      withCredentials: true\n    });\n    dispatch(messageSlice.actions.deleteMessageSuccess(response.data.message));\n    dispatch(messageSlice.actions.clearAllErrors());\n  } catch (error) {\n    dispatch(messageSlice.actions.deleteMessageFailed(error.response.data.message));\n  }\n};\nexport const clearAllMessageErrors = () => dispatch => {\n  dispatch(messageSlice.actions.clearAllErrors());\n};\nexport const resetMessagesSlice = () => dispatch => {\n  dispatch(messageSlice.actions.resetMessageSlice());\n};\nexport default messageSlice.reducer;","map":{"version":3,"names":["createSlice","axios","messageSlice","name","initialState","loading","messages","error","message","reducers","getAllMessagesRequest","state","action","getAllMessagesSuccess","payload","getAllMessagesFailed","deleteMessageRequest","deleteMessageSuccess","deleteMessageFailed","resetMessageSlice","clearAllErrors","getAllMessages","dispatch","actions","response","get","withCredentials","data","deleteMessage","id","delete","clearAllMessageErrors","resetMessagesSlice","reducer"],"sources":["D:/Online Store/dashboard/src/components/admin/messages/messageSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst messageSlice = createSlice({\r\n  name: \"messages\",\r\n  initialState: {\r\n    loading: false,\r\n    messages: [],\r\n    error: null,\r\n    message: null,\r\n  },\r\n  reducers: {\r\n    getAllMessagesRequest(state, action) {\r\n      state.messages = [];\r\n      state.error = null;\r\n      state.loading = true;\r\n    },\r\n    getAllMessagesSuccess(state, action) {\r\n      state.messages = action.payload;\r\n      state.error = null;\r\n      state.loading = false;\r\n    },\r\n    getAllMessagesFailed(state, action) {\r\n      state.messages = state.messages;\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    },\r\n    deleteMessageRequest(state, action) {\r\n      state.loading = true;\r\n      state.error = null;\r\n      state.message = null;\r\n    },\r\n    deleteMessageSuccess(state, action) {\r\n      state.error = null;\r\n      state.loading = false;\r\n      state.message = action.payload;\r\n    },\r\n    deleteMessageFailed(state, action) {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n      state.message = null;\r\n    },\r\n    resetMessageSlice(state, action) {\r\n      state.error = null;\r\n      state.messages = state.messages;\r\n      state.message = null;\r\n      state.loading = false;\r\n    },\r\n    clearAllErrors(state, action) {\r\n      state.error = null;\r\n      state.messages = state.messages;\r\n    },\r\n  },\r\n});\r\n\r\nexport const getAllMessages = () => async (dispatch) => {\r\n  dispatch(messageSlice.actions.getAllMessagesRequest());\r\n  try {\r\n    const response = await axios.get(\r\n      \"http://localhost:8000/api/message/admin/messages\",\r\n      { withCredentials: true }\r\n    );\r\n    dispatch(\r\n      messageSlice.actions.getAllMessagesSuccess(response.data.messages)\r\n    );\r\n    dispatch(messageSlice.actions.clearAllErrors());\r\n  } catch (error) {\r\n    dispatch(\r\n      messageSlice.actions.getAllMessagesFailed(error.response.data.message)\r\n    );\r\n  }\r\n};\r\n\r\nexport const deleteMessage = (id) => async (dispatch) => {\r\n  dispatch(messageSlice.actions.deleteMessageRequest());\r\n  try {\r\n    const response = await axios.delete(\r\n      `http://localhost:8000/api/message/admin/delete/${id}`,\r\n      {\r\n        withCredentials: true,\r\n      }\r\n    );\r\n    dispatch(messageSlice.actions.deleteMessageSuccess(response.data.message));\r\n    dispatch(messageSlice.actions.clearAllErrors());\r\n  } catch (error) {\r\n    dispatch(\r\n      messageSlice.actions.deleteMessageFailed(error.response.data.message)\r\n    );\r\n  }\r\n};\r\n\r\nexport const clearAllMessageErrors = () => (dispatch) => {\r\n  dispatch(messageSlice.actions.clearAllErrors());\r\n};\r\n\r\nexport const resetMessagesSlice = () => (dispatch) => {\r\n  dispatch(messageSlice.actions.resetMessageSlice());\r\n};\r\n\r\nexport default messageSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}